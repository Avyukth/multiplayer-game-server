// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/game_stats.proto

package lila_assgnm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GameStatsClient is the client API for GameStats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameStatsClient interface {
	GetGameStats(ctx context.Context, in *GameStatsRequest, opts ...grpc.CallOption) (*GameStatsResponse, error)
}

type gameStatsClient struct {
	cc grpc.ClientConnInterface
}

func NewGameStatsClient(cc grpc.ClientConnInterface) GameStatsClient {
	return &gameStatsClient{cc}
}

func (c *gameStatsClient) GetGameStats(ctx context.Context, in *GameStatsRequest, opts ...grpc.CallOption) (*GameStatsResponse, error) {
	out := new(GameStatsResponse)
	err := c.cc.Invoke(ctx, "/gamestats.GameStats/GetGameStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameStatsServer is the server API for GameStats service.
// All implementations must embed UnimplementedGameStatsServer
// for forward compatibility
type GameStatsServer interface {
	GetGameStats(context.Context, *GameStatsRequest) (*GameStatsResponse, error)
	mustEmbedUnimplementedGameStatsServer()
}

// UnimplementedGameStatsServer must be embedded to have forward compatible implementations.
type UnimplementedGameStatsServer struct {
}

func (UnimplementedGameStatsServer) GetGameStats(context.Context, *GameStatsRequest) (*GameStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGameStats not implemented")
}
func (UnimplementedGameStatsServer) mustEmbedUnimplementedGameStatsServer() {}

// UnsafeGameStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameStatsServer will
// result in compilation errors.
type UnsafeGameStatsServer interface {
	mustEmbedUnimplementedGameStatsServer()
}

func RegisterGameStatsServer(s grpc.ServiceRegistrar, srv GameStatsServer) {
	s.RegisterService(&GameStats_ServiceDesc, srv)
}

func _GameStats_GetGameStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GameStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameStatsServer).GetGameStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gamestats.GameStats/GetGameStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameStatsServer).GetGameStats(ctx, req.(*GameStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameStats_ServiceDesc is the grpc.ServiceDesc for GameStats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameStats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gamestats.GameStats",
	HandlerType: (*GameStatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGameStats",
			Handler:    _GameStats_GetGameStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/game_stats.proto",
}
